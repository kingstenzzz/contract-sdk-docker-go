syntax = "proto3";

package proto;

option go_package = "chainmaker.org/chainmaker-contract-sdk-docker-go/pb/protogo";

// manager as server - sandbox established a connection to the manager
service DMSRpc {
    rpc DMSCommunicate(stream DMSMessage) returns (stream DMSMessage);
}

message DMSMessage {

    string tx_id = 1;

    DMSMessageType type = 2;

    uint32 current_height = 3;

    int32 result_code = 4;

    bytes payload = 5;

    string message = 6;
}

enum DMSMessageType {

    DMS_MESSAGE_TYPE_UNDEFINED = 0;

    DMS_MESSAGE_TYPE_REGISTER = 1;

    DMS_MESSAGE_TYPE_REGISTERED = 2;

    DMS_MESSAGE_TYPE_PREPARE = 3;

    DMS_MESSAGE_TYPE_READY = 4;

    DMS_MESSAGE_TYPE_INIT = 5;

    DMS_MESSAGE_TYPE_INVOKE = 6;

    DMS_MESSAGE_TYPE_GET_STATE_REQUEST = 7;

    DMS_MESSAGE_TYPE_GET_STATE_RESPONSE = 8;

    DMS_MESSAGE_TYPE_CALL_CONTRACT_REQUEST = 9;

    DMS_MESSAGE_TYPE_CALL_CONTRACT_RESPONSE = 10;

    DMS_MESSAGE_TYPE_COMPLETED = 11;

    DMS_MESSAGE_TYPE_ERROR = 12;

    DMS_MESSAGE_TYPE_CREATE_KV_ITERATOR_REQUEST = 13;

    DMS_MESSAGE_TYPE_CREATE_KV_ITERATOR_RESPONSE = 14;

    DMS_MESSAGE_TYPE_CONSUME_KV_ITERATOR_REQUEST = 15;

    DMS_MESSAGE_TYPE_CONSUME_KV_ITERATOR_RESPONSE = 16;

    DMS_MESSAGE_TYPE_CREATE_KEY_HISTORY_ITER_REQUEST= 17;

    DMS_MESSAGE_TYPE_CREATE_KEY_HISTORY_ITER_RESPONSE = 18;

    DMS_MESSAGE_TYPE_CONSUME_KEY_HISTORY_ITER_REQUEST= 19;

    DMS_MESSAGE_TYPE_CONSUME_KEY_HISTORY_ITER_RESPONSE = 20;

    DMS_MESSAGE_TYPE_GET_SENDER_ADDRESS_REQUEST = 21;

    DMS_MESSAGE_TYPE_GET_SENDER_ADDRESS_RESPONSE = 22;
}

// --------------------  request message ---------------------
message Input {
    map<string, bytes> args = 1;
}

message CallContractRequest {
    string contract_name = 1;

    string contract_version = 2;
    // args
    map<string, bytes> args = 3;
}

// --------------------  result message ---------------------

// user method response
message Response {
    // A status code that should follow the HTTP status codes.
    int32 status = 1;

    // A message associated with the response code. error has message
    string message = 2;

    // A payload that can be used to include metadata with this response. success with payload
    bytes payload = 3;
}

// real user contract response
message ContractResponse {

    // always has response
    Response response = 1;

    // always has write map
    map<string, bytes> write_map = 2;

    // only cross contracts has read map
    map<string, bytes> read_map = 3;

    // always has events
    repeated Event events = 4;
}

message Event {
    // Event topic
    string topic = 1;
    // Event contract name
    string contract_name = 2;
    // Event contract version
    string contract_version = 3;
    // Event payload
    repeated string data = 4;
}










